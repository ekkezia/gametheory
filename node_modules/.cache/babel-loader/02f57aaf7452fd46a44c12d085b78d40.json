{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './utils/firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\n\nfunction AllSubmissions() {\n  _s();\n\n  let [subs, setSubs] = useState([]);\n  let [ordered, setOrdered] = useState([]);\n  let allSubs = [];\n  let orderedPics = [];\n  const myData = [];\n\n  const getSubmission = async () => {\n    // Get all documents in a collection\n    const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n    querySnapshot.forEach(doc => {\n      // console.log('Submitter Name:', doc.data().name);\n      allSubs.push(doc.data());\n    });\n    setSubs(allSubs);\n    let largest = allSubs[0].no;\n\n    for (let i = 1; i < allSubs.length; i++) {\n      if (allSubs[i].no > largest) {\n        orderedPics.push(parseInt(allSubs[largest - 1].pic));\n        largest = allSubs[i].no; // orderedSubs.push(largest);\n      }\n    }\n\n    console.log('All Submission', allSubs[largest - 1].no);\n    console.log('Ordered Submission', orderedPics);\n    setOrdered(orderedPics);\n    setRegName(allSubs[largest - 1].name);\n  };\n\n  for (let i = 0; i < ordered.length; i++) {\n    myData.push({\n      key: i + 1,\n      name: picsOptions[ordered[i]]\n    });\n  }\n\n  console.log(' Submission Pics', myData);\n}\n\n_s(AllSubmissions, \"1/rV0bEs31M/Ktyq0R0j2arW+h0=\");\n\n_c = AllSubmissions;\nexport default AllSubmissions;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllSubmissions\");","map":{"version":3,"sources":["/Users/ek/gametheory/src/components/utils/allSubmission.js"],"names":["React","Component","useState","useEffect","useRef","db","collection","addDoc","setDoc","getDocs","doc","onSnapshot","AllSubmissions","subs","setSubs","ordered","setOrdered","allSubs","orderedPics","myData","getSubmission","querySnapshot","forEach","push","data","largest","no","i","length","parseInt","pic","console","log","setRegName","name","key","picsOptions"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,yBAAf;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,GAA9C,EAAmDC,UAAnD,QAAqE,oBAArE;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AAC1B,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAApC;AACA,MAAIe,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,QAAMC,MAAM,GAAG,EAAf;;AAEE,QAAMC,aAAa,GAAG,YAAY;AAChC;AACA,UAAMC,aAAa,GAAG,MAAMZ,OAAO,CAACH,UAAU,CAACD,EAAD,EAAK,cAAL,CAAX,CAAnC;AACAgB,IAAAA,aAAa,CAACC,OAAd,CAAuBZ,GAAD,IAAS;AAC7B;AACAO,MAAAA,OAAO,CAACM,IAAR,CAAab,GAAG,CAACc,IAAJ,EAAb;AACD,KAHD;AAIAV,IAAAA,OAAO,CAACG,OAAD,CAAP;AAEA,QAAIQ,OAAO,GAAGR,OAAO,CAAC,CAAD,CAAP,CAAWS,EAAzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACW,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAIV,OAAO,CAACU,CAAD,CAAP,CAAWD,EAAX,GAAgBD,OAApB,EAA6B;AAC3BP,QAAAA,WAAW,CAACK,IAAZ,CAAiBM,QAAQ,CAACZ,OAAO,CAACQ,OAAO,GAAG,CAAX,CAAP,CAAqBK,GAAtB,CAAzB;AACAL,QAAAA,OAAO,GAAGR,OAAO,CAACU,CAAD,CAAP,CAAWD,EAArB,CAF2B,CAG3B;AACD;AACF;;AACDK,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bf,OAAO,CAACQ,OAAO,GAAG,CAAX,CAAP,CAAqBC,EAAnD;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCd,WAAlC;AACAF,IAAAA,UAAU,CAACE,WAAD,CAAV;AACAe,IAAAA,UAAU,CAAChB,OAAO,CAACQ,OAAO,GAAG,CAAX,CAAP,CAAqBS,IAAtB,CAAV;AACD,GArBD;;AAsBA,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCR,IAAAA,MAAM,CAACI,IAAP,CAAY;AAAEY,MAAAA,GAAG,EAAER,CAAC,GAAG,CAAX;AAAcO,MAAAA,IAAI,EAAEE,WAAW,CAACrB,OAAO,CAACY,CAAD,CAAR;AAA/B,KAAZ;AACD;;AAEDI,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCb,MAAhC;AACD;;GAlCQP,c;;KAAAA,c;AAoCT,eAAeA,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './utils/firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\n\nfunction AllSubmissions() {\nlet [subs, setSubs] = useState([]);\nlet [ordered, setOrdered] = useState([]);\nlet allSubs = [];\nlet orderedPics = [];\nconst myData = [];\n\n  const getSubmission = async () => {\n    // Get all documents in a collection\n    const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n    querySnapshot.forEach((doc) => {\n      // console.log('Submitter Name:', doc.data().name);\n      allSubs.push(doc.data());\n    });\n    setSubs(allSubs);\n\n    let largest = allSubs[0].no;\n    for (let i = 1; i < allSubs.length; i++) {\n      if (allSubs[i].no > largest) {\n        orderedPics.push(parseInt(allSubs[largest - 1].pic));\n        largest = allSubs[i].no;\n        // orderedSubs.push(largest);\n      }\n    }\n    console.log('All Submission', allSubs[largest - 1].no);\n    console.log('Ordered Submission', orderedPics);\n    setOrdered(orderedPics);\n    setRegName(allSubs[largest - 1].name);\n  };\n  for (let i = 0; i < ordered.length; i++) {\n    myData.push({ key: i + 1, name: picsOptions[ordered[i]] })\n  }\n\n  console.log(' Submission Pics', myData);\n}\n\nexport default AllSubmissions;"]},"metadata":{},"sourceType":"module"}