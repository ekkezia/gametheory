{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\nlet allSubs = [];\nlet orderedPics = [];\nlet orderedNames = [];\nconst myData = [];\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png'];\n\nconst GetSubmission = async () => {\n  _s();\n\n  const [data, setData] = useState(null); // Get all documents in a collection\n\n  const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n  querySnapshot.forEach(doc => {\n    // console.log('Submitter Name:', doc.data().name);\n    allSubs.push(doc.data());\n  });\n  let largest = allSubs[0].no;\n\n  for (let i = 1; i < allSubs.length; i++) {\n    if (allSubs[i].no > largest) {\n      orderedNames.push(allSubs[largest - 1].name);\n      orderedPics.push(parseInt(allSubs[largest - 1].pic));\n      largest = allSubs[i].no;\n    }\n  }\n\n  for (let i = 0; i < orderedPics.length; i++) {\n    myData.push({\n      key: i + 1,\n      name: orderedNames[i],\n      picture: picsOptions[orderedPics[i]]\n    });\n  }\n\n  console.log(' Submission Pics', myData[0].name);\n  setData(myData);\n  return data;\n};\n\n_s(GetSubmission, \"r4Mei8r/vISzc+89378cYwOGDkw=\");\n\n_c = GetSubmission;\nGetSubmission(); // const allSubmissions = getSubmission()\n// .then(function(data) {\n//   console.log(\"data is: \" + data) // `data` is not `undefined`\n//   console.log('promise my data', myData);\n// })\n\nexport default data;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetSubmission\");","map":{"version":3,"sources":["/Users/ek/gametheory/src/components/utils/allSubmission.js"],"names":["React","Component","useState","useEffect","useRef","db","collection","addDoc","setDoc","getDocs","doc","onSnapshot","allSubs","orderedPics","orderedNames","myData","picsOptions","GetSubmission","data","setData","querySnapshot","forEach","push","largest","no","i","length","name","parseInt","pic","key","picture","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,GAA9C,EAAmDC,UAAnD,QAAqE,oBAArE;AAGA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,MAAMC,MAAM,GAAG,EAAf;AAEA,MAAMC,WAAW,GAAG,CAAC,+BAAD,EAAkC,+BAAlC,EAAmE,+BAAnE,EAAoG,+BAApG,CAApB;;AAGA,MAAMC,aAAa,GAAG,YAAY;AAAA;;AAChC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,IAAD,CAAhC,CADgC,CAEhC;;AACA,QAAMkB,aAAa,GAAG,MAAMX,OAAO,CAACH,UAAU,CAACD,EAAD,EAAK,cAAL,CAAX,CAAnC;AACAe,EAAAA,aAAa,CAACC,OAAd,CAAuBX,GAAD,IAAS;AAC7B;AACAE,IAAAA,OAAO,CAACU,IAAR,CAAaZ,GAAG,CAACQ,IAAJ,EAAb;AACD,GAHD;AAKA,MAAIK,OAAO,GAAGX,OAAO,CAAC,CAAD,CAAP,CAAWY,EAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIb,OAAO,CAACa,CAAD,CAAP,CAAWD,EAAX,GAAgBD,OAApB,EAA6B;AAC3BT,MAAAA,YAAY,CAACQ,IAAb,CAAkBV,OAAO,CAACW,OAAO,GAAG,CAAX,CAAP,CAAqBI,IAAvC;AACAd,MAAAA,WAAW,CAACS,IAAZ,CAAiBM,QAAQ,CAAChB,OAAO,CAACW,OAAO,GAAG,CAAX,CAAP,CAAqBM,GAAtB,CAAzB;AAEAN,MAAAA,OAAO,GAAGX,OAAO,CAACa,CAAD,CAAP,CAAWD,EAArB;AACD;AACF;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,WAAW,CAACa,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CV,IAAAA,MAAM,CAACO,IAAP,CAAY;AAAEQ,MAAAA,GAAG,EAAEL,CAAC,GAAG,CAAX;AAAcE,MAAAA,IAAI,EAAEb,YAAY,CAACW,CAAD,CAAhC;AAAqCM,MAAAA,OAAO,EAAEf,WAAW,CAACH,WAAW,CAACY,CAAD,CAAZ;AAAzD,KAAZ;AACD;;AAEDO,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgClB,MAAM,CAAC,CAAD,CAAN,CAAUY,IAA1C;AACAR,EAAAA,OAAO,CAACJ,MAAD,CAAP;AAEA,SAAOG,IAAP;AACD,CA3BD;;GAAMD,a;;KAAAA,a;AA6BNA,aAAa,G,CACb;AACA;AACA;AACA;AACA;;AAGA,eAAeC,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\n\n\nlet allSubs = [];\nlet orderedPics = [];\nlet orderedNames = [];\nconst myData = [];\n\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png']\n\n\nconst GetSubmission = async () => {\n  const [data, setData] = useState(null);\n  // Get all documents in a collection\n  const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n  querySnapshot.forEach((doc) => {\n    // console.log('Submitter Name:', doc.data().name);\n    allSubs.push(doc.data());\n  });\n\n  let largest = allSubs[0].no;\n  for (let i = 1; i < allSubs.length; i++) {\n    if (allSubs[i].no > largest) {\n      orderedNames.push(allSubs[largest - 1].name);\n      orderedPics.push(parseInt(allSubs[largest - 1].pic));\n\n      largest = allSubs[i].no;\n    }\n  }\n\n  for (let i = 0; i < orderedPics.length; i++) {\n    myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n  }\n  \n  console.log(' Submission Pics', myData[0].name);\n  setData(myData);\n\n  return data;\n};\n\nGetSubmission();\n// const allSubmissions = getSubmission()\n// .then(function(data) {\n//   console.log(\"data is: \" + data) // `data` is not `undefined`\n//   console.log('promise my data', myData);\n// })\n\n\nexport default data;"]},"metadata":{},"sourceType":"module"}