{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png'];\n\nfunction AllSubmissions() {\n  _s();\n\n  let allSubs = [];\n  let orderedPics = [];\n  let orderedNames = [];\n  const myData = [];\n\n  const getSubmission = async () => {\n    // Get all documents in a collection\n    const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n    querySnapshot.forEach(doc => {\n      // console.log('Submitter Name:', doc.data().name);\n      allSubs.push(doc.data());\n    });\n    let largest = allSubs[0].no;\n\n    for (let i = 1; i < allSubs.length; i++) {\n      if (allSubs[i].no > largest) {\n        orderedNames.push(allSubs[largest - 1].name);\n        orderedPics.push(parseInt(allSubs[largest - 1].pic));\n        largest = allSubs[i].no;\n      }\n    }\n\n    for (let i = 0; i < orderedPics.length; i++) {\n      myData.push({\n        key: i + 1,\n        name: orderedNames[i],\n        picture: picsOptions[orderedPics[i]]\n      });\n    } // console.log(' Submission Pics', myData[0].name);\n\n  };\n\n  const [data, setData] = useState(null);\n  getSubmission().then(function (myData) {\n    console.log('promise my data', myData);\n    setData(myData);\n  });\n  useEffect(() => {\n    console.log('data', data);\n  }, []);\n}\n\n_s(AllSubmissions, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = AllSubmissions;\nexport default AllSubmissions;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllSubmissions\");","map":{"version":3,"sources":["/Users/ek/gametheory/src/components/utils/allSubmission.js"],"names":["React","Component","useState","useEffect","useRef","db","collection","addDoc","setDoc","getDocs","doc","onSnapshot","picsOptions","AllSubmissions","allSubs","orderedPics","orderedNames","myData","getSubmission","querySnapshot","forEach","push","data","largest","no","i","length","name","parseInt","pic","key","picture","setData","then","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,GAA9C,EAAmDC,UAAnD,QAAqE,oBAArE;AAKA,MAAMC,WAAW,GAAG,CAAC,+BAAD,EAAkC,+BAAlC,EAAmE,+BAAnE,EAAoG,+BAApG,CAApB;;AAGA,SAASC,cAAT,GAA0B;AAAA;;AACxB,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,QAAMC,MAAM,GAAG,EAAf;;AAEA,QAAMC,aAAa,GAAG,YAAY;AAChC;AACA,UAAMC,aAAa,GAAG,MAAMV,OAAO,CAACH,UAAU,CAACD,EAAD,EAAK,cAAL,CAAX,CAAnC;AACAc,IAAAA,aAAa,CAACC,OAAd,CAAuBV,GAAD,IAAS;AAC7B;AACAI,MAAAA,OAAO,CAACO,IAAR,CAAaX,GAAG,CAACY,IAAJ,EAAb;AACD,KAHD;AAKA,QAAIC,OAAO,GAAGT,OAAO,CAAC,CAAD,CAAP,CAAWU,EAAzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAACY,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAIX,OAAO,CAACW,CAAD,CAAP,CAAWD,EAAX,GAAgBD,OAApB,EAA6B;AAC3BP,QAAAA,YAAY,CAACK,IAAb,CAAkBP,OAAO,CAACS,OAAO,GAAG,CAAX,CAAP,CAAqBI,IAAvC;AACAZ,QAAAA,WAAW,CAACM,IAAZ,CAAiBO,QAAQ,CAACd,OAAO,CAACS,OAAO,GAAG,CAAX,CAAP,CAAqBM,GAAtB,CAAzB;AAEAN,QAAAA,OAAO,GAAGT,OAAO,CAACW,CAAD,CAAP,CAAWD,EAArB;AACD;AACF;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAAW,CAACW,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CR,MAAAA,MAAM,CAACI,IAAP,CAAY;AAAES,QAAAA,GAAG,EAAEL,CAAC,GAAG,CAAX;AAAcE,QAAAA,IAAI,EAAEX,YAAY,CAACS,CAAD,CAAhC;AAAqCM,QAAAA,OAAO,EAAEnB,WAAW,CAACG,WAAW,CAACU,CAAD,CAAZ;AAAzD,OAAZ;AACD,KApB+B,CAsBhC;;AACD,GAvBD;;AAyBA,QAAM,CAACH,IAAD,EAAOU,OAAP,IAAkB9B,QAAQ,CAAC,IAAD,CAAhC;AAEAgB,EAAAA,aAAa,GACVe,IADH,CACQ,UAAUhB,MAAV,EAAkB;AACtBiB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BlB,MAA/B;AACAe,IAAAA,OAAO,CAACf,MAAD,CAAP;AACD,GAJH;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBb,IAApB;AACD,GAFQ,EAEN,EAFM,CAAT;AAGD;;GAzCQT,c;;KAAAA,c;AA6CT,eAAeA,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\n\n\n\n\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png']\n\n\nfunction AllSubmissions() {\n  let allSubs = [];\n  let orderedPics = [];\n  let orderedNames = [];\n  const myData = [];\n\n  const getSubmission = async () => {\n    // Get all documents in a collection\n    const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n    querySnapshot.forEach((doc) => {\n      // console.log('Submitter Name:', doc.data().name);\n      allSubs.push(doc.data());\n    });\n\n    let largest = allSubs[0].no;\n    for (let i = 1; i < allSubs.length; i++) {\n      if (allSubs[i].no > largest) {\n        orderedNames.push(allSubs[largest - 1].name);\n        orderedPics.push(parseInt(allSubs[largest - 1].pic));\n\n        largest = allSubs[i].no;\n      }\n    }\n\n    for (let i = 0; i < orderedPics.length; i++) {\n      myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n    }\n\n    // console.log(' Submission Pics', myData[0].name);\n  };\n\n  const [data, setData] = useState(null);\n\n  getSubmission()\n    .then(function (myData) {\n      console.log('promise my data', myData);\n      setData(myData);\n    });\n  useEffect(() => {\n    console.log('data', data);\n  }, [])\n}\n\n\n\nexport default AllSubmissions;"]},"metadata":{},"sourceType":"module"}