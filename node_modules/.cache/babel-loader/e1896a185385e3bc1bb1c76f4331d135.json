{"ast":null,"code":"var _jsxFileName = \"/Users/ek/gametheory/src/components/Content.jsx\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from '@material-ui/core';\nimport { Row, Col } from 'react-simple-flex-grid';\nimport \"react-simple-flex-grid/lib/main.css\";\nimport { allSubsInfo } from './utils/allSubmission';\nimport React, { useEffect, useState } from 'react';\nimport db from './utils/firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@mui/material/Tooltip'; // import moment from 'moment';\n\nimport { useMediaQuery } from 'react-responsive';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    margin: '0'\n  },\n  column: {\n    border: '2px solid black',\n    padding: '10%'\n  },\n  image: {\n    width: '100%',\n    height: '100%'\n  },\n  parentDesktop: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, 3%)'\n  },\n  parentMobile: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, 10%)'\n  },\n  child: {\n    border: '1px solid black',\n    aspectRatio: '1/1'\n  }\n}));\nexport default function Content(_ref) {\n  _s();\n\n  let {\n    allSubmissions\n  } = _ref;\n  const isDesktopOrLaptop = useMediaQuery({\n    query: '(min-width: 1224px)'\n  });\n  const isBigScreen = useMediaQuery({\n    query: '(min-width: 1824px)'\n  });\n  const isTabletOrMobile = useMediaQuery({\n    query: '(max-width: 1224px)'\n  });\n  const isPortrait = useMediaQuery({\n    query: '(orientation: portrait)'\n  });\n  const isRetina = useMediaQuery({\n    query: '(min-resolution: 2dppx)'\n  });\n  const classes = useStyles();\n  const picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png'];\n  const [allSubs, setAllSubs] = useState([]); // Fetch all pre-existing images\n\n  useEffect(() => {\n    let responseArray = [];\n    getDocs(collection(db, \"Responses\")).then(response => {\n      response.forEach(doc => {\n        responseArray.push(doc.data());\n      });\n    });\n    setAllSubs(responseArray);\n  }, []);\n  console.log('res array content', allSubs);\n  const [parentGridStyle, setParentGridStyle] = useState(classes.parentDesktop);\n  useEffect(() => {\n    if (isDesktopOrLaptop) {\n      setParentGridStyle(classes.parentDesktop);\n    } else if (isTabletOrMobile) {\n      setParentGridStyle(classes.parentMobile);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: parentGridStyle,\n      children: allSubs.map(result =>\n      /*#__PURE__*/\n      //   <Col className={classes.column}\n      //     xs={{ span: 6 }} sm={{ span: 5}} md={{ span: 1}}\n      //     lg={{ span: 1 }} xl={{ span: 1 }}\n      //   >{result.pic}\n      //     <Tooltip title={\n      //   <React.Fragment>\n      //     <Typography color=\"inherit\">Submitted by {result.name}</Typography>\n      //     <em>at {result.time.toString()}</em>\n      //   </React.Fragment>\n      // } followCursor>\n      //       <img className={classes.image} src={picsOptions[result.pic - 1]} />\n      //     </Tooltip>\n      //   </Col>\n      _jsxDEV(\"div\", {\n        className: classes.child,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              color: \"inherit\",\n              children: [\"Submitted by \", result.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n              children: [\"at \", result.time.toString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this),\n          followCursor: true,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.image,\n            src: picsOptions[result.pic - 1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Content, \"cA4KRbqvvq1XNN/ltnFLkGeIXFk=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useStyles];\n});\n\n_c = Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/ek/gametheory/src/components/Content.jsx"],"names":["makeStyles","Row","Col","allSubsInfo","React","useEffect","useState","db","collection","addDoc","setDoc","getDocs","doc","onSnapshot","Typography","Tooltip","useMediaQuery","useStyles","theme","container","position","top","left","width","height","margin","column","border","padding","image","parentDesktop","display","gridTemplateColumns","parentMobile","child","aspectRatio","Content","allSubmissions","isDesktopOrLaptop","query","isBigScreen","isTabletOrMobile","isPortrait","isRetina","classes","picsOptions","allSubs","setAllSubs","responseArray","then","response","forEach","push","data","console","log","parentGridStyle","setParentGridStyle","map","result","name","time","toString","pic"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core';\nimport { Row, Col } from 'react-simple-flex-grid';\nimport \"react-simple-flex-grid/lib/main.css\";\nimport { allSubsInfo } from './utils/allSubmission';\nimport React, { useEffect, useState } from 'react';\nimport db from './utils/firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@mui/material/Tooltip';\n// import moment from 'moment';\nimport { useMediaQuery } from 'react-responsive';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    margin: '0',\n  },\n  column: {\n    border: '2px solid black',\n    padding: '10%',\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n  },\n  parentDesktop: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, 3%)'\n  },\n  parentMobile: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, 10%)'\n  },\n  child: {\n    border: '1px solid black',\n    aspectRatio: '1/1'\n  },\n}));\n\nexport default function Content({ allSubmissions }) {\n  const isDesktopOrLaptop = useMediaQuery({\n    query: '(min-width: 1224px)'\n  })\n  const isBigScreen = useMediaQuery({ query: '(min-width: 1824px)' })\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' })\n  const isPortrait = useMediaQuery({ query: '(orientation: portrait)' })\n  const isRetina = useMediaQuery({ query: '(min-resolution: 2dppx)' })\n\n  const classes = useStyles();\n  const picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png']\n  const [allSubs, setAllSubs] = useState([])\n\n  // Fetch all pre-existing images\n  useEffect(() => {\n    let responseArray = [];\n    getDocs(collection(db, \"Responses\"))\n      .then(response => {\n        response.forEach((doc) => {\n          responseArray.push(doc.data());\n        });\n      });\n\n    setAllSubs(responseArray);\n  }, []);\n\n  console.log('res array content', allSubs);\n\n  const [parentGridStyle, setParentGridStyle] = useState(classes.parentDesktop);\n\n  useEffect(()=>{\n    if(isDesktopOrLaptop){\n      setParentGridStyle(classes.parentDesktop); \n    }\n    else if(isTabletOrMobile){\n      setParentGridStyle(classes.parentMobile); \n    }\n  },[])\n\n  return (\n    <div className={classes.container}>\n      <div className={parentGridStyle}>\n        {allSubs.map(result =>\n          //   <Col className={classes.column}\n          //     xs={{ span: 6 }} sm={{ span: 5}} md={{ span: 1}}\n          //     lg={{ span: 1 }} xl={{ span: 1 }}\n          //   >{result.pic}\n          //     <Tooltip title={\n          //   <React.Fragment>\n          //     <Typography color=\"inherit\">Submitted by {result.name}</Typography>\n          //     <em>at {result.time.toString()}</em>\n          //   </React.Fragment>\n          // } followCursor>\n          //       <img className={classes.image} src={picsOptions[result.pic - 1]} />\n          //     </Tooltip>\n          //   </Col>\n          <div className={classes.child}>\n            <Tooltip title={\n              <React.Fragment>\n                <Typography color=\"inherit\">Submitted by {result.name}</Typography>\n                <em>at {result.time.toString()}</em>\n              </React.Fragment>\n            } followCursor>\n              <img className={classes.image} src={picsOptions[result.pic - 1]} />\n            </Tooltip>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}