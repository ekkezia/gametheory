{"ast":null,"code":"import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\nlet allSubs = [];\nlet orderedPics = [];\nlet orderedNames = [];\nlet myData = [];\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png'];\nexport const getSubmission = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n    querySnapshot.forEach(doc => {\n      allSubs.push(doc.data());\n    });\n    let largest = allSubs[0].no;\n\n    for (let i = 1; i < allSubs.length; i++) {\n      if (allSubs[i].no > largest) {\n        orderedNames.push(allSubs[largest - 1].name);\n        orderedPics.push(parseInt(allSubs[largest - 1].pic));\n        largest = allSubs[i].no;\n      }\n    }\n\n    for (let i = 0; i < orderedPics.length; i++) {\n      myData.push({\n        key: i + 1,\n        name: orderedNames[i],\n        picture: picsOptions[orderedPics[i]]\n      });\n    }\n\n    return myData;\n  } catch (e) {\n    console.log('We have the error', e);\n  }\n}; // const getSubmission = async () => {\n//   // Get all documents in a collection\n//   const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n//   querySnapshot.forEach((doc) => {\n//     // console.log('Submitter Name:', doc.data().name);\n//     allSubs.push(doc.data());\n//   });\n//   let largest = allSubs[0].no;\n//   for (let i = 1; i < allSubs.length; i++) {\n//     if (allSubs[i].no > largest) {\n//       orderedNames.push(allSubs[largest - 1].name);\n//       orderedPics.push(parseInt(allSubs[largest - 1].pic));\n//       largest = allSubs[i].no;\n//     }\n//   }\n//   for (let i = 0; i < orderedPics.length; i++) {\n//     myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n//   }\n//   return myData;\n// };\n\nexport default getSubmission;","map":{"version":3,"sources":["/Users/ek/gametheory/src/components/utils/allSubmission.js"],"names":["React","Component","useState","useEffect","useRef","db","collection","addDoc","setDoc","getDocs","doc","onSnapshot","allSubs","orderedPics","orderedNames","myData","picsOptions","getSubmission","querySnapshot","forEach","push","data","largest","no","i","length","name","parseInt","pic","key","picture","e","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,GAA9C,EAAmDC,UAAnD,QAAqE,oBAArE;AAGA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,MAAM,GAAG,EAAb;AAEA,MAAMC,WAAW,GAAG,CAAC,+BAAD,EAAkC,+BAAlC,EAAmE,+BAAnE,EAAoG,+BAApG,CAApB;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAY;AACvC,MAAI;AACF,UAAMC,aAAa,GAAG,MAAMT,OAAO,CAACH,UAAU,CAACD,EAAD,EAAK,cAAL,CAAX,CAAnC;AACAa,IAAAA,aAAa,CAACC,OAAd,CAAuBT,GAAD,IAAS;AAC7BE,MAAAA,OAAO,CAACQ,IAAR,CAAaV,GAAG,CAACW,IAAJ,EAAb;AACD,KAFD;AAIA,QAAIC,OAAO,GAAGV,OAAO,CAAC,CAAD,CAAP,CAAWW,EAAzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAIZ,OAAO,CAACY,CAAD,CAAP,CAAWD,EAAX,GAAgBD,OAApB,EAA6B;AAC3BR,QAAAA,YAAY,CAACM,IAAb,CAAkBR,OAAO,CAACU,OAAO,GAAG,CAAX,CAAP,CAAqBI,IAAvC;AACAb,QAAAA,WAAW,CAACO,IAAZ,CAAiBO,QAAQ,CAACf,OAAO,CAACU,OAAO,GAAG,CAAX,CAAP,CAAqBM,GAAtB,CAAzB;AAEAN,QAAAA,OAAO,GAAGV,OAAO,CAACY,CAAD,CAAP,CAAWD,EAArB;AACD;AACF;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,WAAW,CAACY,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CT,MAAAA,MAAM,CAACK,IAAP,CAAY;AAAES,QAAAA,GAAG,EAAEL,CAAC,GAAG,CAAX;AAAcE,QAAAA,IAAI,EAAEZ,YAAY,CAACU,CAAD,CAAhC;AAAqCM,QAAAA,OAAO,EAAEd,WAAW,CAACH,WAAW,CAACW,CAAD,CAAZ;AAAzD,OAAZ;AACD;;AAED,WAAOT,MAAP;AACD,GArBD,CAsBA,OAAOgB,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,CAAjC;AACD;AACF,CA1BM,C,CA4BP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,eAAed,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\n\n\nlet allSubs = [];\nlet orderedPics = [];\nlet orderedNames = [];\nlet myData = [];\n\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png']\n\nexport const getSubmission = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n    querySnapshot.forEach((doc) => {\n      allSubs.push(doc.data());\n    });\n\n    let largest = allSubs[0].no;\n    for (let i = 1; i < allSubs.length; i++) {\n      if (allSubs[i].no > largest) {\n        orderedNames.push(allSubs[largest - 1].name);\n        orderedPics.push(parseInt(allSubs[largest - 1].pic));\n\n        largest = allSubs[i].no;\n      }\n    }\n\n    for (let i = 0; i < orderedPics.length; i++) {\n      myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n    }\n    \n    return myData;\n  }\n  catch (e) {\n    console.log('We have the error', e);\n  }\n}\n\n// const getSubmission = async () => {\n//   // Get all documents in a collection\n//   const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n//   querySnapshot.forEach((doc) => {\n//     // console.log('Submitter Name:', doc.data().name);\n//     allSubs.push(doc.data());\n//   });\n\n//   let largest = allSubs[0].no;\n//   for (let i = 1; i < allSubs.length; i++) {\n//     if (allSubs[i].no > largest) {\n//       orderedNames.push(allSubs[largest - 1].name);\n//       orderedPics.push(parseInt(allSubs[largest - 1].pic));\n\n//       largest = allSubs[i].no;\n//     }\n//   }\n\n//   for (let i = 0; i < orderedPics.length; i++) {\n//     myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n//   }\n\n//   return myData;\n// };\n\nexport default getSubmission;"]},"metadata":{},"sourceType":"module"}