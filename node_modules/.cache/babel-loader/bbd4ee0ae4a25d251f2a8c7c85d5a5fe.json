{"ast":null,"code":"import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\nlet allSubs = [];\nlet orderedPics = [];\nlet orderedNames = [];\nlet myData = [];\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png'];\n\nconst getSubmission = () => {\n  return new Promise(async () => {\n    try {\n      // Get all documents in a collection\n      const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n      querySnapshot.forEach(doc => {\n        allSubs.push(doc.data());\n      });\n      let largest = allSubs[0].no;\n\n      for (let i = 1; i < allSubs.length; i++) {\n        if (allSubs[i].no > largest) {\n          orderedNames.push(allSubs[largest - 1].name);\n          orderedPics.push(parseInt(allSubs[largest - 1].pic));\n          largest = allSubs[i].no;\n        }\n      }\n\n      for (let i = 0; i < orderedPics.length; i++) {\n        myData.push({\n          key: i + 1,\n          name: orderedNames[i],\n          picture: picsOptions[orderedPics[i]]\n        });\n      }\n    } catch (e) {}\n  });\n}; // const getSubmission = async () => {\n//   // Get all documents in a collection\n//   const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n//   querySnapshot.forEach((doc) => {\n//     // console.log('Submitter Name:', doc.data().name);\n//     allSubs.push(doc.data());\n//   });\n//   let largest = allSubs[0].no;\n//   for (let i = 1; i < allSubs.length; i++) {\n//     if (allSubs[i].no > largest) {\n//       orderedNames.push(allSubs[largest - 1].name);\n//       orderedPics.push(parseInt(allSubs[largest - 1].pic));\n//       largest = allSubs[i].no;\n//     }\n//   }\n//   for (let i = 0; i < orderedPics.length; i++) {\n//     myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n//   }\n//   return myData;\n// };\n\n\nexport default getSubmission;","map":{"version":3,"sources":["/Users/ek/gametheory/src/components/utils/allSubmission.js"],"names":["React","Component","useState","useEffect","useRef","db","collection","addDoc","setDoc","getDocs","doc","onSnapshot","allSubs","orderedPics","orderedNames","myData","picsOptions","getSubmission","Promise","querySnapshot","forEach","push","data","largest","no","i","length","name","parseInt","pic","key","picture","e"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,GAA9C,EAAmDC,UAAnD,QAAqE,oBAArE;AAGA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,MAAM,GAAG,EAAb;AAEA,MAAMC,WAAW,GAAG,CAAC,+BAAD,EAAkC,+BAAlC,EAAmE,+BAAnE,EAAoG,+BAApG,CAApB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,SAAO,IAAIC,OAAJ,CAAY,YAAY;AAC7B,QAAI;AACA;AACA,YAAMC,aAAa,GAAG,MAAMV,OAAO,CAACH,UAAU,CAACD,EAAD,EAAK,cAAL,CAAX,CAAnC;AACAc,MAAAA,aAAa,CAACC,OAAd,CAAuBV,GAAD,IAAS;AAC7BE,QAAAA,OAAO,CAACS,IAAR,CAAaX,GAAG,CAACY,IAAJ,EAAb;AACD,OAFD;AAIA,UAAIC,OAAO,GAAGX,OAAO,CAAC,CAAD,CAAP,CAAWY,EAAzB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAIb,OAAO,CAACa,CAAD,CAAP,CAAWD,EAAX,GAAgBD,OAApB,EAA6B;AAC3BT,UAAAA,YAAY,CAACO,IAAb,CAAkBT,OAAO,CAACW,OAAO,GAAG,CAAX,CAAP,CAAqBI,IAAvC;AACAd,UAAAA,WAAW,CAACQ,IAAZ,CAAiBO,QAAQ,CAAChB,OAAO,CAACW,OAAO,GAAG,CAAX,CAAP,CAAqBM,GAAtB,CAAzB;AAEAN,UAAAA,OAAO,GAAGX,OAAO,CAACa,CAAD,CAAP,CAAWD,EAArB;AACD;AACF;;AAED,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,WAAW,CAACa,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CV,QAAAA,MAAM,CAACM,IAAP,CAAY;AAAES,UAAAA,GAAG,EAAEL,CAAC,GAAG,CAAX;AAAcE,UAAAA,IAAI,EAAEb,YAAY,CAACW,CAAD,CAAhC;AAAqCM,UAAAA,OAAO,EAAEf,WAAW,CAACH,WAAW,CAACY,CAAD,CAAZ;AAAzD,SAAZ;AACD;AACJ,KApBD,CAoBE,OAAOO,CAAP,EAAU,CACX;AACF,GAvBM,CAAP;AAwBD,CAzBD,C,CA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA,eAAef,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useState, useEffect, useRef } from \"react\";\nimport db from './firebase.config';\nimport { collection, addDoc, setDoc, getDocs, doc, onSnapshot } from \"firebase/firestore\";\n\n\nlet allSubs = [];\nlet orderedPics = [];\nlet orderedNames = [];\nlet myData = [];\n\nconst picsOptions = ['https://imgur.com/ONukpTh.png', 'https://imgur.com/rY8d0Ye.png', 'https://imgur.com/xXAYEcH.png', 'https://imgur.com/aWS9TAH.png']\n\nconst getSubmission = () => {\n  return new Promise(async () => {\n    try {\n        // Get all documents in a collection\n        const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n        querySnapshot.forEach((doc) => {\n          allSubs.push(doc.data());\n        });\n\n        let largest = allSubs[0].no;\n        for (let i = 1; i < allSubs.length; i++) {\n          if (allSubs[i].no > largest) {\n            orderedNames.push(allSubs[largest - 1].name);\n            orderedPics.push(parseInt(allSubs[largest - 1].pic));\n\n            largest = allSubs[i].no;\n          }\n        }\n\n        for (let i = 0; i < orderedPics.length; i++) {\n          myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n        }\n    } catch (e) {\n    }\n  });\n}\n// const getSubmission = async () => {\n//   // Get all documents in a collection\n//   const querySnapshot = await getDocs(collection(db, \"currResponse\"));\n//   querySnapshot.forEach((doc) => {\n//     // console.log('Submitter Name:', doc.data().name);\n//     allSubs.push(doc.data());\n//   });\n\n//   let largest = allSubs[0].no;\n//   for (let i = 1; i < allSubs.length; i++) {\n//     if (allSubs[i].no > largest) {\n//       orderedNames.push(allSubs[largest - 1].name);\n//       orderedPics.push(parseInt(allSubs[largest - 1].pic));\n\n//       largest = allSubs[i].no;\n//     }\n//   }\n\n//   for (let i = 0; i < orderedPics.length; i++) {\n//     myData.push({ key: i + 1, name: orderedNames[i], picture: picsOptions[orderedPics[i]] })\n//   }\n\n//   return myData;\n// };\n\nexport default getSubmission;"]},"metadata":{},"sourceType":"module"}